/* tslint:disable */
/* eslint-disable */
/**
 * CV API
 * CV API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  Skill,
  SkillTag,
  SkilltagsPost400Response,
} from "../models/index";
import {
  SkillFromJSON,
  SkillToJSON,
  SkillTagFromJSON,
  SkillTagToJSON,
  SkilltagsPost400ResponseFromJSON,
  SkilltagsPost400ResponseToJSON,
} from "../models/index";

export interface SkillrecordsPostRequest {
  skill: Array<Skill>;
}

export interface SkillsBySkillIdGetRequest {
  bySkillId: number;
}

export interface SkillsPostRequest {
  skill: Skill;
}

export interface SkilltagsPostRequest {
  skillTag: SkillTag;
}

/**
 *
 */
export class SkillsApi extends runtime.BaseAPI {
  /**
   * スキルを一括登録する。
   * スキル一括登録
   */
  async skillrecordsPostRaw(
    requestParameters: SkillrecordsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Skill>>> {
    if (
      requestParameters.skill === null ||
      requestParameters.skill === undefined
    ) {
      throw new runtime.RequiredError(
        "skill",
        "Required parameter requestParameters.skill was null or undefined when calling skillrecordsPost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/skillrecords`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.skill.map(SkillToJSON),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SkillFromJSON),
    );
  }

  /**
   * スキルを一括登録する。
   * スキル一括登録
   */
  async skillrecordsPost(
    requestParameters: SkillrecordsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Skill>> {
    const response = await this.skillrecordsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 指定スキルを取得する。
   * 【未実装】指定スキル取得
   */
  async skillsBySkillIdGetRaw(
    requestParameters: SkillsBySkillIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Skill>> {
    if (
      requestParameters.bySkillId === null ||
      requestParameters.bySkillId === undefined
    ) {
      throw new runtime.RequiredError(
        "bySkillId",
        "Required parameter requestParameters.bySkillId was null or undefined when calling skillsBySkillIdGet.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/skills/{bySkillId}`.replace(
          `{${"bySkillId"}}`,
          encodeURIComponent(String(requestParameters.bySkillId)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SkillFromJSON(jsonValue),
    );
  }

  /**
   * 指定スキルを取得する。
   * 【未実装】指定スキル取得
   */
  async skillsBySkillIdGet(
    requestParameters: SkillsBySkillIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Skill> {
    const response = await this.skillsBySkillIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 全スキルを取得する。
   * 全スキル取得
   */
  async skillsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Skill>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/skills`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SkillFromJSON),
    );
  }

  /**
   * 全スキルを取得する。
   * 全スキル取得
   */
  async skillsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Skill>> {
    const response = await this.skillsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * スキルを登録する。
   * スキル登録
   */
  async skillsPostRaw(
    requestParameters: SkillsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Skill>> {
    if (
      requestParameters.skill === null ||
      requestParameters.skill === undefined
    ) {
      throw new runtime.RequiredError(
        "skill",
        "Required parameter requestParameters.skill was null or undefined when calling skillsPost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/skills`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SkillToJSON(requestParameters.skill),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SkillFromJSON(jsonValue),
    );
  }

  /**
   * スキルを登録する。
   * スキル登録
   */
  async skillsPost(
    requestParameters: SkillsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Skill> {
    const response = await this.skillsPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 全スキルタグを取得する。
   * 全スキルタグ取得
   */
  async skilltagsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<SkillTag>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/skilltags`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SkillTagFromJSON),
    );
  }

  /**
   * 全スキルタグを取得する。
   * 全スキルタグ取得
   */
  async skilltagsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<SkillTag>> {
    const response = await this.skilltagsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * スキルタグを登録する。
   * スキルタグ登録
   */
  async skilltagsPostRaw(
    requestParameters: SkilltagsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SkillTag>> {
    if (
      requestParameters.skillTag === null ||
      requestParameters.skillTag === undefined
    ) {
      throw new runtime.RequiredError(
        "skillTag",
        "Required parameter requestParameters.skillTag was null or undefined when calling skilltagsPost.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/skilltags`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SkillTagToJSON(requestParameters.skillTag),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SkillTagFromJSON(jsonValue),
    );
  }

  /**
   * スキルタグを登録する。
   * スキルタグ登録
   */
  async skilltagsPost(
    requestParameters: SkilltagsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SkillTag> {
    const response = await this.skilltagsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
